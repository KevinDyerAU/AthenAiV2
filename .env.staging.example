# Staging Environment Configuration Example
# Copy to .env.staging (or .env) and adjust. Do NOT commit real secrets.

APP_NAME=enhanced-ai-agent-os
APP_ENV=staging
PORT=5678
API_BASE_URL=https://staging-api.example.com
LOG_LEVEL=debug

# n8n (publicly reachable staging URL recommended)
N8N_BASE_URL=https://staging-n8n.example.com
N8N_API_KEY=
N8N_WEBHOOK_SECRET=staging_webhook_secret_change_me

# Primary DB (Application)
DB_TYPE=postgres
DB_HOST=staging-postgres.internal
DB_PORT=5432
DB_USER=ai_user
DB_PASSWORD=
DB_NAME=ai_agent_staging
DATABASE_URL=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
# Pooling/SSL (staging close to prod)
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=1800
DATABASE_SSL_MODE=require
DATABASE_SSL_ROOT_CERT=

# Neo4j (managed or dedicated staging)
NEO4J_URI=bolt://neo4j.staging.internal:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=

# RabbitMQ (used in staging)
RABBITMQ_HOST=rabbitmq.staging.internal
RABBITMQ_PORT=5672
RABBITMQ_USER=ai
RABBITMQ_PASSWORD=
RABBITMQ_VHOST=/staging
RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}${RABBITMQ_VHOST}

# Redis (optional but recommended)
REDIS_URL=redis://redis.staging.internal:6379

# Security & JWT
JWT_SECRET=staging_jwt_secret_change_me
JWT_SECRET_KEY=${JWT_SECRET}
ENCRYPTION_KEY=base64:
HMAC_SECRET=staging_hmac_secret
WEBHOOK_SECRET=staging_webhook_secret
# CORS: include staging frontend URL(s)
CORS_ORIGINS=https://staging-frontend.example.com
ALLOW_ORIGINS=https://staging-frontend.example.com
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX=180

# AI Services - Primary OpenAI Configuration
OPENAI_API_KEY=your-openai-key
OPENAI_MODEL=gpt-4
OPENAI_TEMPERATURE=0.1

# Optional OpenRouter Configuration (set USE_OPENROUTER=true to enable)
USE_OPENROUTER=false
OPENROUTER_API_KEY=your-openrouter-key
OPENROUTER_MODEL=meta-llama/llama-3.1-8b-instruct:free
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
ANTHROPIC_API_KEY=
ANTHROPIC_MODEL=claude-3-5-sonnet-20240620
GOOGLE_API_KEY=
GOOGLE_MODEL=gemini-1.5-pro

# Observability
ENABLE_PROMETHEUS=true
PROMETHEUS_PORT=9464
ENABLE_TRACING=true
OTEL_EXPORTER_OTLP_ENDPOINT=https://otel-collector.staging.internal:4317
OTEL_SERVICE_NAME=enhanced-ai-agent-os-staging
SENTRY_DSN=
GRAFANA_URL=https://grafana.staging.internal
ALERTMANAGER_URL=https://alertmanager.staging.internal

# Notifications
PAGERDUTY_INTEGRATION_KEY=
SLACK_WEBHOOK_URL=

# Email
EMAIL_PROVIDER=smtp
SMTP_HOST=smtp.staging.internal
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=ai@staging.example.com

# Cloud Storage (staging bucket/project)
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=us-east-1
S3_BUCKET=ai-agent-artifacts-staging

# Feature flags (close to prod, allow some debugging)
FEATURE_ENABLE_PLANNING=true
FEATURE_ENABLE_EXECUTION=true
FEATURE_ENABLE_QA=true
FEATURE_ENABLE_COMMUNICATION=true
DEBUG_MODE=false
VERBOSE_LOGGING=false

# Backup & DR (optional in staging)
BACKUP_ENABLED=false
BACKUP_S3_BUCKET=ai-agent-backups-staging
BACKUP_SCHEDULE_CRON="0 3 * * *"
BACKUP_RETENTION_DAYS=14
DR_STRATEGY=single-region-passive

# Tools registry
TOOLS_BASE_URL=${N8N_BASE_URL}
TOOLS_REGISTRY_PATH=./workflows/tools_registry.json
