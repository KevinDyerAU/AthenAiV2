# Production Environment Configuration Example
# Copy to .env or .env.production and adjust as needed. Do NOT commit real secrets.

APP_NAME=enhanced-ai-agent-os
APP_ENV=production
PORT=5678
# Must be publicly reachable base URL for n8n
N8N_BASE_URL=https://your-domain.example.com
N8N_API_KEY=
N8N_WEBHOOK_SECRET=

DB_TYPE=postgres
DB_HOST=postgres.prod.internal
DB_PORT=5432
DB_USER=ai_user
DB_PASSWORD=
DB_NAME=ai_agent
# Highly recommended in prod
REDIS_URL=redis://redis.prod.internal:6379
DATABASE_URL=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

# RabbitMQ (required in production for queues/executions)
RABBITMQ_HOST=rabbitmq.prod.internal
RABBITMQ_PORT=5672
RABBITMQ_USER=ai
RABBITMQ_PASSWORD=
RABBITMQ_VHOST=/ai
RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}${RABBITMQ_VHOST}

AI_DEFAULT_PROVIDER=openai
OPENAI_API_KEY=your-openai-key
OPENAI_MODEL=gpt-4
OPENAI_TEMPERATURE=0.1

# Optional OpenRouter Configuration (set USE_OPENROUTER=true to enable)
USE_OPENROUTER=false
OPENROUTER_API_KEY=your-openrouter-key
OPENROUTER_MODEL=meta-llama/llama-3.1-8b-instruct:free
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1

ANTHROPIC_API_KEY=
ANTHROPIC_MODEL=claude-3-5-sonnet-20240620

GOOGLE_API_KEY=
GOOGLE_MODEL=gemini-1.5-pro

AZURE_OPENAI_ENDPOINT=
AZURE_OPENAI_API_KEY=
AZURE_OPENAI_DEPLOYMENT=gpt-4o

JWT_SECRET=
# Duplicate for Flask server compatibility
JWT_SECRET_KEY=${JWT_SECRET}
# 32 raw bytes, base64 encoded, prefixed with base64:
ENCRYPTION_KEY=base64:
HMAC_SECRET=
WEBHOOK_SECRET=
# Restrict origins in production
CORS_ORIGINS=https://your-frontend.example.com
ALLOW_ORIGINS=https://your-frontend.example.com
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX=120

LOG_LEVEL=info
ENABLE_PROMETHEUS=true
PROMETHEUS_PORT=9464
ENABLE_TRACING=true
OTEL_EXPORTER_OTLP_ENDPOINT=https://otel-collector.prod.internal:4317
OTEL_SERVICE_NAME=enhanced-ai-agent-os
SENTRY_DSN=
GRAFANA_URL=https://grafana.prod.internal
ALERTMANAGER_URL=https://alertmanager.prod.internal

PAGERDUTY_INTEGRATION_KEY=
SLACK_WEBHOOK_URL=

NEO4J_URI=bolt://neo4j.prod.internal:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=

EMAIL_PROVIDER=ses
SENDGRID_API_KEY=
SES_ACCESS_KEY_ID=
SES_SECRET_ACCESS_KEY=
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=ai@your-domain.example.com

X_BEARER_TOKEN=
LINKEDIN_ACCESS_TOKEN=
FACEBOOK_ACCESS_TOKEN=

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=us-east-1
S3_BUCKET=ai-agent-artifacts-prod

GCP_PROJECT_ID=
GCP_CREDENTIALS_JSON=

AZURE_STORAGE_ACCOUNT=
AZURE_STORAGE_KEY=
AZURE_STORAGE_CONTAINER=

PARALLELISM_DEFAULT=8
MAX_RETRIES_DEFAULT=5
BACKOFF_STRATEGY=exponential
TIMEOUT_MS=60000

# Database connection pooling & SSL (production hardened)
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=20
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=1800
DATABASE_SSL_MODE=require
DATABASE_SSL_ROOT_CERT=/etc/ssl/certs/ca-certificates.crt

FEATURE_ENABLE_PLANNING=true
FEATURE_ENABLE_EXECUTION=true
FEATURE_ENABLE_QA=true
FEATURE_ENABLE_COMMUNICATION=true

COMPLIANCE_STANDARDS=CAN-SPAM,GDPR,OWASP
AUDIT_LOG_ENABLED=true
AUDIT_LOG_DESTINATION=http
AUDIT_LOG_PATH=/var/log/ai-agent/audit.log

# TLS/SSL config (reverse proxy / app-level)
TLS_ENABLED=true
TLS_CERT_FILE=/etc/ssl/certs/your-cert.pem
TLS_KEY_FILE=/etc/ssl/private/your-key.pem
TLS_MIN_VERSION=TLSv1.2

# Auth/OIDC (SSO in prod recommended)
AUTH_PROVIDER=oidc
OIDC_ISSUER=
OIDC_CLIENT_ID=
OIDC_CLIENT_SECRET=
OIDC_AUDIENCE=
OIDC_JWKS_URI=

# Backup & DR
BACKUP_ENABLED=true
BACKUP_S3_BUCKET=ai-agent-backups-prod
BACKUP_SCHEDULE_CRON="0 2 * * *"
BACKUP_RETENTION_DAYS=30
DR_STRATEGY=multi-region-active-passive

TOOLS_BASE_URL=${N8N_BASE_URL}

