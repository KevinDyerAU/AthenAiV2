version: '3.8'

services:
  # =============================================================================
  # PRIMARY DATABASE - PostgreSQL with pgvector for embeddings
  # =============================================================================
  postgres:
    image: pgvector/pgvector:pg15
    container_name: athenai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-athenai}
      POSTGRES_USER: ${POSTGRES_USER:-athenai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-knowledge-substrate.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-athenai_user} -d ${POSTGRES_DB:-athenai}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - athenai-network

  # =============================================================================
  # MESSAGE QUEUE - RabbitMQ for document processing
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: athenai-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-athenai_queue}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - athenai-network

  # =============================================================================
  # DOCUMENT PROCESSING - Unstructured.io Worker
  # =============================================================================
  unstructured-worker:
    build:
      context: .
      dockerfile: Dockerfile.unstructured
    container_name: athenai-unstructured
    restart: unless-stopped
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-athenai_queue}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      POSTGRES_URL: postgresql://${POSTGRES_USER:-athenai_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-athenai}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      UNSTRUCTURED_QUEUE: documents.process
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-2}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./data/unstructured/input:/app/input
      - ./data/unstructured/output:/app/output
      - unstructured_logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - athenai-network

  # =============================================================================
  # MAIN APPLICATION - AthenAI with Document Agent
  # =============================================================================
  athenai:
    build: .
    container_name: athenai-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-athenai_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-athenai}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-athenai_queue}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data/unstructured/input:/app/uploads
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - athenai-network

# =============================================================================
# PERSISTENT VOLUMES
# =============================================================================
volumes:
  postgres_data:
  rabbitmq_data:
  unstructured_logs:

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  athenai-network:
    driver: bridge
